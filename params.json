{"name":"Spectator","tagline":"Test Driven Development red-green cycle for simple people!","body":"## The gist\r\n\r\nSpectator is a simple watcher for your specs:\r\n- it will execute a spec each time a file (spec or implementation) is modified or created (_really catches new files!_)\r\n- it **does not** starts your whole suite at start, nor when a spec passes or fails (as autospec tends to do)\r\n- _if you ask_ it runs the whole spec suite\r\n\r\n> Started as a custom [Watchr](https://github.com/mynyml/watchr) script **Spectator** has grown up to a tiny gem!\r\n\r\n### Compatibility\r\n\r\nWorks with RSpec-1 and RSpec-2 (looks for a `.rspec` file in the project root).\r\n\r\n\r\n## Usage\r\n\r\nLaunch `spectator` in a terminal and go back to code!\r\n\r\nThe normal behavior is similar to `autotest --fast-start --no-full-after-failed`\r\nbut gives the user a bit more control over execution. By hitting CTRL+C (or CMD+. on OSX)\r\nyou get the following prompt:\r\n\r\n    ^C (Interrupted with CTRL+C)\r\n    --- What to do now? (q=quit, a=all-specs):\r\n\r\nType `q` and `ENTER` (or `CTRL+C` again) to quit.\r\n\r\nType `a` and `ENTER` (or `CTRL+C` again) to execute the whole suite of specs.\r\n\r\n\r\n## Advanced Configuration\r\n\r\nIf you want to override some path matching:\r\n\r\n**`BASE_DIR_REGEXP`:**\r\n\r\nThe glob that expanded will list the directories that contains the code. **Default:**\r\n\r\n\r\n**`SPEC_DIR_REGEXP`:**\r\n\r\nThe glob that expanded will list the directories that contains the specs. **Default:**\r\n\r\n**`RSPEC_COMMAND`:**\r\n\r\nThe full command that will run your specs. **Default:** `bundle exec rspec` (or `bundle exec spec` for RSpec 1.x)\r\n\r\n\r\n### Examples\r\n\r\n#### Inline ENV variables\r\n\r\n```shell\r\n# this will match lib/opal/parser.rb to spec/cli/parser.rb\r\nBASE_DIR_REGEXP='lib/opal' SPEC_DIR_REGEXP='spec/cli' spectator\r\n```\r\n\r\n\r\n#### Exported ENV variables\r\n\r\n```shell\r\nBASE_DIR_REGEXP: '(?:opal/corelib|stdlib|spec)'\r\nSPEC_DIR_REGEXP: '(?:spec/corelib/core|spec/stdlib/\\w+/spec)'\r\nRSPEC_COMMAND: 'bundle exec ./bin/opal-mspec'\r\nspectator\r\n```\r\n\r\n\r\n#### With a `.spectator` config file\r\n\r\n```yaml\r\n# contents of \".spectator\" file\r\nBASE_DIR_REGEXP: 'lib/opal'\r\nSPEC_DIR_REGEXP: 'spec/cli'\r\n```\r\n\r\n    spectator\r\n\r\n\r\n#### Specifying a custom config file\r\n\r\n```shell\r\n# contents of \".my-spectator-config\" file\r\nBASE_DIR_REGEXP: 'lib/opal'\r\nSPEC_DIR_REGEXP: 'spec/cli'\r\n```\r\n\r\n    spectator .my-spectator-config\r\n\r\n#### With a `.spectator.rb` script file\r\n\r\n```ruby\r\n# contents of \".spectator.rb\" file\r\nmodule Spectator\r\n  class SuccessNotifier\r\n    def notify(success)\r\n      fork { `say #{say_message(success)}`}\r\n    end\r\n\r\n    def say_message(success)\r\n      success ? 'All right' : 'Ouch'\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n\r\n## License\r\n\r\nCopyright Â© 2011-2014 Elia Schito, released under the [MIT license](https://github.com/elia/spectator/blob/master/MIT-LICENSE)\r\n","google":"UA-7137430-8","note":"Don't delete this file! It's used internally to help with page regeneration."}